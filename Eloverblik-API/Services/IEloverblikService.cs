//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Eloverblik_API.Services
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEloverblikService
    {
        /// <summary>
        /// Call this endpoint to verify whether we are currently operating normally.
        /// </summary>
        /// <remarks>
        /// If we are experiencing more traffic than we can handle, this endpoint may return HTTP 503.
        /// <br/>The status currently refreshes every 60 seconds.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsaliveAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Call this endpoint to verify whether we are currently operating normally.
        /// </summary>
        /// <remarks>
        /// If we are experiencing more traffic than we can handle, this endpoint may return HTTP 503.
        /// <br/>The status currently refreshes every 60 seconds.
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsaliveAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a timeserie for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="aggregation">Time aggregation. Possible values are: 'Actual', 'Quarter', 'Hour', 'Day', 'Month', 'Year'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyEnergyDataMarketDocumentResponseListApiResponse> GettimeseriesAsync(string dateFrom, string dateTo, string aggregation, MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a timeserie for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="aggregation">Time aggregation. Possible values are: 'Actual', 'Quarter', 'Hour', 'Day', 'Month', 'Year'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MyEnergyDataMarketDocumentResponseListApiResponse> GettimeseriesAsync(string dateFrom, string dateTo, string aggregation, MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a meterreading for at given date for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeterDataReadingsDtoResponseListApiResponse> GetmeterreadingsAsync(string dateFrom, string dateTo, MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a meterreading for at given date for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeterDataReadingsDtoResponseListApiResponse> GetmeterreadingsAsync(string dateFrom, string dateTo, MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a csv file containing a timeseries for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="aggregation">Time aggregation. Possible values are: 'Actual', 'Quarter', 'Hour', 'Day', 'Month', 'Year'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExportAsync(string dateFrom, string dateTo, string aggregation, MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a csv file containing a timeseries for each metering point in list.
        /// </summary>
        /// <param name="dateFrom">Date from filter in format: 'YYYY-MM-DD'</param>
        /// <param name="dateTo">Date to filter in format: 'YYYY-MM-DD'</param>
        /// <param name="aggregation">Time aggregation. Possible values are: 'Actual', 'Quarter', 'Hour', 'Day', 'Month', 'Year'</param>
        /// <param name="body">List of metering point ids.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExportAsync(string dateFrom, string dateTo, string aggregation, MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a list of metering points.
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// </remarks>
        /// <param name="includeAll">When includeAll is false, only the metering points with relations are returned. When includeAll is true the list will be a merge of the related metering points with a lookup using CPR or CVR. CPR is used if you are private user. CVR is used if you access as an employee.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointApiDtoListApiResponse> MeteringpointsAsync(bool? includeAll);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of metering points.
        /// </summary>
        /// <remarks>
        /// Sample request:
        /// </remarks>
        /// <param name="includeAll">When includeAll is false, only the metering points with relations are returned. When includeAll is true the list will be a merge of the related metering points with a lookup using CPR or CVR. CPR is used if you are private user. CVR is used if you access as an employee.</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointApiDtoListApiResponse> MeteringpointsAsync(bool? includeAll, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates relations to the meteringpoints in the request for which there already exist a CPR/CVR relation.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringResponseListApiResponse> AddPOSTAsync(MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates relations to the meteringpoints in the request for which there already exist a CPR/CVR relation.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringResponseListApiResponse> AddPOSTAsync(MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a relation to the meteringPointId in the request.
        /// </summary>
        /// <param name="meteringPointId">The id of the metering point</param>
        /// <param name="webAccessCode">The web access code is provided by the distribution company</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringApiResponse> AddPUTAsync(string meteringPointId, string webAccessCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a relation to the meteringPointId in the request.
        /// </summary>
        /// <param name="meteringPointId">The id of the metering point</param>
        /// <param name="webAccessCode">The web access code is provided by the distribution company</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringApiResponse> AddPUTAsync(string meteringPointId, string webAccessCode, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a list of metering points with details.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointDetailsCustomerDtoResponseListApiResponse> GetdetailsAsync(MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a list of metering points with details.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointDetailsCustomerDtoResponseListApiResponse> GetdetailsAsync(MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns pricedata for a list of metering points.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointFeesDtoResponseListApiResponse> GetchargesAsync(MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns pricedata for a list of metering points.
        /// </summary>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MeteringPointFeesDtoResponseListApiResponse> GetchargesAsync(MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes a relation to the meteringPointId in the request.
        /// </summary>
        /// <param name="meteringPointId">The id of the metering point</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanApiResponse> RelationAsync(string meteringPointId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes a relation to the meteringPointId in the request.
        /// </summary>
        /// <param name="meteringPointId">The id of the metering point</param>
        /// <returns>When successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BooleanApiResponse> RelationAsync(string meteringPointId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a csv file with metering points details.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Export2Async(MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a csv file with metering points details.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Export2Async(MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a csv file containing current charges for a list of metering points.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Export3Async(MeteringPointsRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a csv file containing current charges for a list of metering points.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Export3Async(MeteringPointsRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a data access token.
        /// </summary>
        /// <remarks>
        /// In order to get an access token you will need
        /// <br/>a valid refresh token. This token can be fetched from the portal.
        /// <br/>The token is a JWT token. There are tools that can read the content eg: https://jwt.io/
        /// <br/>The token must be submittet in the request header like "Authorization: Bearer eyJhbGciOi..."
        /// </remarks>
        /// <returns>Else this even when errors are returned. Check the response.Success and the response.ErrorCode to know if the request performed as exspected</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringApiResponse> TokenAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a data access token.
        /// </summary>
        /// <remarks>
        /// In order to get an access token you will need
        /// <br/>a valid refresh token. This token can be fetched from the portal.
        /// <br/>The token is a JWT token. There are tools that can read the content eg: https://jwt.io/
        /// <br/>The token must be submittet in the request header like "Authorization: Bearer eyJhbGciOi..."
        /// </remarks>
        /// <returns>Else this even when errors are returned. Check the response.Success and the response.ErrorCode to know if the request performed as exspected</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StringApiResponse> TokenAsync(System.Threading.CancellationToken cancellationToken);
    }
}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625